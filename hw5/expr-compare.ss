(define (special-type? x)
  (or (equal? 'if x) (equal? 'quote x) (equal? 'lambda x) (equal? 'λ x)))

(define (lambda? x y)
  (and (or (equal? 'lambda x) (equal? 'λ x)) (or (equal? 'lambda y) (equal? 'λ y))))

(define (dot-pair? x) (and (not (list? x)) (pair? x)))

(define (length-pair x)
  (if (or (symbol? x) (equal? '() x)) 0 (+ 1 (length-pair (cdr x)))))

(define (combine x y)
  (list (append (car x) (car y)) (append (cadr x) (cadr y)) (cons (caddr x) (caddr y))))

(define (same-type? x y)
  (or (equal? x y) (not (or (special-type? x) (special-type? y))) (lambda? x y)))

(define (same-type-args? x y)
  (or (and (equal? '() x) (equal? '() y))
      (and (list? x) (list? y) (equal? (length x) (length y))
	   (same-type-args? (car x) (car y)) (same-type-args? (cdr x) (cdr y)))
      (and (dot-pair? x) (dot-pair? y) (equal? (length-pair x) (length-pair y))
	   (same-type-args? (car x) (car y)) (same-type-args? (cdr x) (cdr y)))
      (and (symbol? x) (symbol? y))))

(define (bind-symbol x y)
  (string->symbol (string-append (symbol->string x) "!" (symbol->string y))))

(define (expr-compare-lambda-args x y)
  (cond ((and (equal? '() x) (equal? '() y)) '(() () ()))
	((and (symbol? x) (symbol? y))
	 (if (equal? x y) `(() () ,x) `((,x) (,y) ,(bind-symbol x y))))
	((or (and (list? x) (list? y)) (and (dot-pair? x) (dot-pair? y)))
	 (combine (expr-compare-lambda-args (car x) (car y))
		  (expr-compare-lambda-args (cdr x) (cdr y))))))

(define (expr-compare-expr x y lambda-expr)
  (cond ((and (equal? '() x) (equal? '() y)) '())
	((and (number? x) (number? y))
	 (if (equal? x y) x `(if % ,x ,y)))
	((and (boolean? x) (boolean? y))
	 (if (equal? x y) x (if (equal? x #t) '% '(not %))))
	((and (symbol? x) (symbol? y))      
	 (let ((xi (index-of (car lambda-expr) x)) (yi (index-of (cadr lambda-expr) y)))
	   (let ((id-x (if xi (bind-symbol x (list-ref (cadr lambda-expr) xi)) x))
		 (id-y (if yi (bind-symbol (list-ref (car lambda-expr) yi) y) y)))
	     (if (equal? id-x id-y) id-x `(if % ,id-x ,id-y)))))
	((and (pair? x) (pair? y))
	 (let ((xh (car x)) (yh (car y)) (xt (cdr x)) (yt (cdr y)))
	   (cond ((not (equal? (length-pair x) (length-pair y))) `(if % ,x ,y))
		 ((not (same-type? xh yh)) `(if % ,x ,y))
		 ((and (equal? 'if xh) (equal? 'if yh))
		  (cons 'if (expr-compare-expr xt yt lambda-expr)))
		 ((and (equal? 'quote xh) (equal? 'quote yh)) `(if % ,x ,y))
		 ((lambda? xh yh) (expr-compare-lambda x y 0))
		 (else (cons (expr-compare-expr xh yh lambda-expr)
			     (expr-compare-expr (cdr x) (cdr y) lambda-expr))))))
	(else (if (equal? x y) x `(if % ,x ,y)))))

(define (expr-compare-lambda x y pos)
  (cond ((equal? 0 pos)
	 (let ((keyword (if (or (equal? 'λ (car x)) (equal? 'λ (car y))) 'λ 'lambda)))
	   (if (not (same-type-args? (cadr x) (cadr y))) `(if % ,x ,y)
	       (cons keyword (expr-compare-lambda (cdr x) (cdr y) 1)))))
	((equal? 1 pos)
	 (let ((args (expr-compare-lambda-args (car x) (car y))))
	   (cons (caddr args)
		 (expr-compare-expr (cdr x) (cdr y) `(,(car args) ,(cadr args))))))))

(define (expr-compare x y) (expr-compare-expr x y '(() ())))

(define (test-expr-compare x y) 
  (and (equal? (eval x) (eval (list 'let '((% #t)) (expr-compare x y))))
       (equal? (eval y) (eval (list 'let '((% #f)) (expr-compare x y))))))

(define test-expr-x ''((lambda (a (c . d) b) ((lambda (k) a k k) c b d)) 1 2 3))
(define test-expr-y ''((λ (a (e . f) g) ((lambda (l) a l l) e g f)) 1 2 5))

(test-expr-compare test-expr-x test-expr-y)
